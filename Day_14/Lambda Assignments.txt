
1) define a functional interface "First" with an abstract method "void disp1()" , default method "void disp2()" and a static method "void disp3()"

inside main function using lambda expression invoke "disp1()" and "disp2()" methods.
also invoke "disp3()" method inside main.





interface First
{
	abstract void Disp1();
	public static void Disp3() 
	{
		System.out.println("Inside Disp3 of First");
	}
	public default void Disp2() 
	{
		System.out.println("Inside Disp2 of First");
	}	
}
public class task_1 {

	public static void main(String[] args)
	{
		First ref=()->{System.out.println("Inside Disp1 of First");};
		ref.Disp1();
		ref.Disp2();
		First.Disp3();
		
	}

}





2) define a functional interface "Second" with an abstract method "void disp4()".

define a class Demo with main function.
inside main function create two implementations of "Second" using lambda expression and display their names.





interface Second
{
	public void Disp4();
}
public class task_2 {

	public static void main(String[] args)
	{
		First ref=()->{System.out.println("Inside Disp1 of First");};
		First ref1=()->{System.out.println("Inside Disp1 of First");};
		ref.Disp1();
		ref.Disp2();
		First.Disp3();
		System.out.println(ref.getClass().getName());
		System.out.println(ref1.getClass().getName());
		
	}

}




3) define a functional interface "MyInterface" with an abstract method "void fun()"

define a class Demo with two functions "static void perform" and main.

from main function pass lambda expression, collect it in "perform" method and invoke "fun()" function.





interface MyInterface
{
public void fun();	
}
public class task_3 
{
	public static void perform(MyInterface ref) 
	{
		ref.fun();
	}


	public static void main(String[] args) 
	{
		MyInterface ref1=()->{System.out.println("Inside of first implementation of MyInterface");};
		perform(ref1);
	}
}


4) define a functional interface "Calculator" with an abstract method "int multiply(int a,int b)"
define a class "CalcDemo" with main method.
inside main using lambda create an implementation of "Calculator" , invoke "multiply()" method and display its result.







interface Calculator
{
public abstract int multiply(int a,int b);	
}

public class task_4 {

	public static void main(String[] args) 
	{
		Calculator ref=(int a,int b)->{return a*b;};
		System.out.println(ref.multiply(100,10));
	}

}





5) define a class "Display" with "void disp" method. inside this method display values from 1 to 10.

create an implementation of "Runnable" using lambda expression which will invoke "disp()" method of "Display" class.

create 2 threads and pass above created "Runnable" implementation to these threads.
make sure while one thread is executing other thread will not interfere.


/*

INCOMPLETE

*/




class Display
{
	void disp() 
	{
		for(int i=1;i<=10;i++)
			System.out.println(i);
	}
}
public class task_5 {

	public static void main(String[] args) {
		Display s=new Display();
		Runnable ref=()->{s.disp();};
		Runnable ref2=()->{s.disp();};
		ref.run();
		ref2.run();

	}

}

